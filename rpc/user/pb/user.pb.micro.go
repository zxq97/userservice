// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/user/user.proto

package user_service

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for UserServer service

type UserServerService interface {
	GetUserinfo(ctx context.Context, in *UserInfoRequest, opts ...client.CallOption) (*UserInfoResponse, error)
	GetBatchUserinfo(ctx context.Context, in *UserInfoBatchRequest, opts ...client.CallOption) (*UserInfoBatchResponse, error)
	GetHistoryBrowse(ctx context.Context, in *FeedListRequest, opts ...client.CallOption) (*FeedListResponse, error)
	GetBlackList(ctx context.Context, in *BlackListRequest, opts ...client.CallOption) (*FeedListResponse, error)
	GetCollectionList(ctx context.Context, in *FeedListRequest, opts ...client.CallOption) (*FeedListResponse, error)
	Black(ctx context.Context, in *BlackRequest, opts ...client.CallOption) (*EmptyResponse, error)
	CancelBlack(ctx context.Context, in *CancelBlackRequest, opts ...client.CallOption) (*EmptyResponse, error)
	Collection(ctx context.Context, in *CollectionRequest, opts ...client.CallOption) (*EmptyResponse, error)
	CancelCollection(ctx context.Context, in *CancelCollectionRequest, opts ...client.CallOption) (*EmptyResponse, error)
	AddBrowse(ctx context.Context, in *AddBrowseRequest, opts ...client.CallOption) (*EmptyResponse, error)
	CreateUser(ctx context.Context, in *CreateUserRequest, opts ...client.CallOption) (*EmptyResponse, error)
}

type userServerService struct {
	c    client.Client
	name string
}

func NewUserServerService(name string, c client.Client) UserServerService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "user"
	}
	return &userServerService{
		c:    c,
		name: name,
	}
}

func (c *userServerService) GetUserinfo(ctx context.Context, in *UserInfoRequest, opts ...client.CallOption) (*UserInfoResponse, error) {
	req := c.c.NewRequest(c.name, "UserServer.GetUserinfo", in)
	out := new(UserInfoResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerService) GetBatchUserinfo(ctx context.Context, in *UserInfoBatchRequest, opts ...client.CallOption) (*UserInfoBatchResponse, error) {
	req := c.c.NewRequest(c.name, "UserServer.GetBatchUserinfo", in)
	out := new(UserInfoBatchResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerService) GetHistoryBrowse(ctx context.Context, in *FeedListRequest, opts ...client.CallOption) (*FeedListResponse, error) {
	req := c.c.NewRequest(c.name, "UserServer.GetHistoryBrowse", in)
	out := new(FeedListResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerService) GetBlackList(ctx context.Context, in *BlackListRequest, opts ...client.CallOption) (*FeedListResponse, error) {
	req := c.c.NewRequest(c.name, "UserServer.GetBlackList", in)
	out := new(FeedListResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerService) GetCollectionList(ctx context.Context, in *FeedListRequest, opts ...client.CallOption) (*FeedListResponse, error) {
	req := c.c.NewRequest(c.name, "UserServer.GetCollectionList", in)
	out := new(FeedListResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerService) Black(ctx context.Context, in *BlackRequest, opts ...client.CallOption) (*EmptyResponse, error) {
	req := c.c.NewRequest(c.name, "UserServer.Black", in)
	out := new(EmptyResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerService) CancelBlack(ctx context.Context, in *CancelBlackRequest, opts ...client.CallOption) (*EmptyResponse, error) {
	req := c.c.NewRequest(c.name, "UserServer.CancelBlack", in)
	out := new(EmptyResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerService) Collection(ctx context.Context, in *CollectionRequest, opts ...client.CallOption) (*EmptyResponse, error) {
	req := c.c.NewRequest(c.name, "UserServer.Collection", in)
	out := new(EmptyResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerService) CancelCollection(ctx context.Context, in *CancelCollectionRequest, opts ...client.CallOption) (*EmptyResponse, error) {
	req := c.c.NewRequest(c.name, "UserServer.CancelCollection", in)
	out := new(EmptyResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerService) AddBrowse(ctx context.Context, in *AddBrowseRequest, opts ...client.CallOption) (*EmptyResponse, error) {
	req := c.c.NewRequest(c.name, "UserServer.AddBrowse", in)
	out := new(EmptyResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerService) CreateUser(ctx context.Context, in *CreateUserRequest, opts ...client.CallOption) (*EmptyResponse, error) {
	req := c.c.NewRequest(c.name, "UserServer.CreateUser", in)
	out := new(EmptyResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for UserServer service

type UserServerHandler interface {
	GetUserinfo(context.Context, *UserInfoRequest, *UserInfoResponse) error
	GetBatchUserinfo(context.Context, *UserInfoBatchRequest, *UserInfoBatchResponse) error
	GetHistoryBrowse(context.Context, *FeedListRequest, *FeedListResponse) error
	GetBlackList(context.Context, *BlackListRequest, *FeedListResponse) error
	GetCollectionList(context.Context, *FeedListRequest, *FeedListResponse) error
	Black(context.Context, *BlackRequest, *EmptyResponse) error
	CancelBlack(context.Context, *CancelBlackRequest, *EmptyResponse) error
	Collection(context.Context, *CollectionRequest, *EmptyResponse) error
	CancelCollection(context.Context, *CancelCollectionRequest, *EmptyResponse) error
	AddBrowse(context.Context, *AddBrowseRequest, *EmptyResponse) error
	CreateUser(context.Context, *CreateUserRequest, *EmptyResponse) error
}

func RegisterUserServerHandler(s server.Server, hdlr UserServerHandler, opts ...server.HandlerOption) error {
	type userServer interface {
		GetUserinfo(ctx context.Context, in *UserInfoRequest, out *UserInfoResponse) error
		GetBatchUserinfo(ctx context.Context, in *UserInfoBatchRequest, out *UserInfoBatchResponse) error
		GetHistoryBrowse(ctx context.Context, in *FeedListRequest, out *FeedListResponse) error
		GetBlackList(ctx context.Context, in *BlackListRequest, out *FeedListResponse) error
		GetCollectionList(ctx context.Context, in *FeedListRequest, out *FeedListResponse) error
		Black(ctx context.Context, in *BlackRequest, out *EmptyResponse) error
		CancelBlack(ctx context.Context, in *CancelBlackRequest, out *EmptyResponse) error
		Collection(ctx context.Context, in *CollectionRequest, out *EmptyResponse) error
		CancelCollection(ctx context.Context, in *CancelCollectionRequest, out *EmptyResponse) error
		AddBrowse(ctx context.Context, in *AddBrowseRequest, out *EmptyResponse) error
		CreateUser(ctx context.Context, in *CreateUserRequest, out *EmptyResponse) error
	}
	type UserServer struct {
		userServer
	}
	h := &userServerHandler{hdlr}
	return s.Handle(s.NewHandler(&UserServer{h}, opts...))
}

type userServerHandler struct {
	UserServerHandler
}

func (h *userServerHandler) GetUserinfo(ctx context.Context, in *UserInfoRequest, out *UserInfoResponse) error {
	return h.UserServerHandler.GetUserinfo(ctx, in, out)
}

func (h *userServerHandler) GetBatchUserinfo(ctx context.Context, in *UserInfoBatchRequest, out *UserInfoBatchResponse) error {
	return h.UserServerHandler.GetBatchUserinfo(ctx, in, out)
}

func (h *userServerHandler) GetHistoryBrowse(ctx context.Context, in *FeedListRequest, out *FeedListResponse) error {
	return h.UserServerHandler.GetHistoryBrowse(ctx, in, out)
}

func (h *userServerHandler) GetBlackList(ctx context.Context, in *BlackListRequest, out *FeedListResponse) error {
	return h.UserServerHandler.GetBlackList(ctx, in, out)
}

func (h *userServerHandler) GetCollectionList(ctx context.Context, in *FeedListRequest, out *FeedListResponse) error {
	return h.UserServerHandler.GetCollectionList(ctx, in, out)
}

func (h *userServerHandler) Black(ctx context.Context, in *BlackRequest, out *EmptyResponse) error {
	return h.UserServerHandler.Black(ctx, in, out)
}

func (h *userServerHandler) CancelBlack(ctx context.Context, in *CancelBlackRequest, out *EmptyResponse) error {
	return h.UserServerHandler.CancelBlack(ctx, in, out)
}

func (h *userServerHandler) Collection(ctx context.Context, in *CollectionRequest, out *EmptyResponse) error {
	return h.UserServerHandler.Collection(ctx, in, out)
}

func (h *userServerHandler) CancelCollection(ctx context.Context, in *CancelCollectionRequest, out *EmptyResponse) error {
	return h.UserServerHandler.CancelCollection(ctx, in, out)
}

func (h *userServerHandler) AddBrowse(ctx context.Context, in *AddBrowseRequest, out *EmptyResponse) error {
	return h.UserServerHandler.AddBrowse(ctx, in, out)
}

func (h *userServerHandler) CreateUser(ctx context.Context, in *CreateUserRequest, out *EmptyResponse) error {
	return h.UserServerHandler.CreateUser(ctx, in, out)
}
